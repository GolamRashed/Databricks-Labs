{
  "$schema":
    "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "clusterAttachedStorageType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Premium_LRS"
      ]
    },
    "provisionSpark": {
      "type": "string",
      "defaultValue": "Yes",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description":
          "Specifies whether to provision an Azure Databricks Spark workspace."
      }
    },
    "provisionKafka": {
      "type": "string",
      "defaultValue": "Yes",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Specifies whether to provision a Kafka cluster."
      }
    },
    "skipLab1": {
      "type": "string",
      "defaultValue": "Yes",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description":
          "Specifies whether to skip the first lab. If so, lab files are copied automatically and ADF is not provisioned."
      }
    },
    "clusterName": {
      "type": "string",
      "metadata": {
        "description":
          "The name of the Azure Databricks workspace and/or HDInsight cluster to create."
      }
    },
    "pricingTier": {
      "type": "string",
      "defaultValue": "premium",
      "allowedValues": ["standard", "premium"],
      "metadata": {
        "description": "The pricing tier of Databricks workspace."
      }
    },
    "clusterLoginUserName": {
      "type": "string",
      "defaultValue": "admin",
      "metadata": {
        "description":
          "These credentials can be used to submit jobs to the Kafka cluster and to log into cluster dashboards."
      }
    },
    "clusterLoginPassword": {
      "type": "securestring",
      "metadata": {
        "description":
          "The password must be at least 10 characters in length and must contain at least one digit, one non-alphanumeric character, and one upper or lower case letter."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "westus2",
      "metadata": {
        "description":
          "The location where all azure resources will be deployed."
      }
    },
    "clusterVersion": {
      "type": "string",
      "defaultValue": "3.6",
      "metadata": {
        "description": "HDInsight Kafka cluster version."
      }
    },
    "sshUserName": {
      "type": "string",
      "defaultValue": "sshuser",
      "metadata": {
        "description":
          "These credentials can be used to remotely access the Kafka cluster."
      }
    },
    "sshPassword": {
      "type": "securestring",
      "metadata": {
        "description":
          "The password must be at least 10 characters in length and must contain at least one digit, one non-alphanumeric character, and one upper or lower case letter."
      }
    },
    "clusterCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The number of HDInsight Kafka clusters to deploy."
      }
    }
  },
  "variables": {
    "cleanResourcePrefix":
      "[replace(replace(replace(toLower(parameters('clusterName')), '-', ''), '_', ''), '.', '')]",
    "clusterAttachedStorageName": "[parameters('clusterName')]",
    "clusterVNetName": "[concat(parameters('clusterName'),'-vnet')]",
    "clusterVNetAddressSpace": "10.0.0.0/16",
    "clusterVNetSubnetName": "default",
    "clusterVNetSubnetAddressRange": "10.0.0.0/24",
    "defaultApiVersion": "2015-05-01-preview",
    "clusterApiVersion": "2015-03-01-preview",
    "dataFactoryName":
      "[concat(variables('cleanResourcePrefix'), 'adf', uniqueString(resourceGroup().id))]",
    "factoryId":
      "[concat('Microsoft.DataFactory/factories/', variables('dataFactoryName'))]",
    "RetailData_BlobStorage_SasUri":
      "https://retaildatasamples.blob.core.windows.net/data?sv=2017-07-29&sr=c&sig=0%2FdYdx%2FW1X8EbO6GpH0R4ZEBrAUkYWqk2uz%2Fym5w3Gg%3D&st=2018-04-01T00%3A00%3A00Z&se=2099-12-31T12%3A59%3A59Z&sp=rl",
    "retailData_folderPath": "data/retaildata/rawdata/",
    "retailData_weblogs_folderPath":
      "[concat(variables('retailData_folderPath'), 'weblognew')]",
    "retailData_users_folderPath":
      "[concat(variables('retailData_folderPath'), 'UserFile')]",
    "retailData_products_folderPath":
      "[concat(variables('retailData_folderPath'), 'ProductFile')]",
    "retailDataDestination_folderPath": "retaildata/rawdata/",
    "weblogsDestinationPath":
      "[concat(variables('retailDataDestination_folderPath'), 'weblognew')]",
    "usersDestinationPath":
      "[concat(variables('retailDataDestination_folderPath'), 'UserFile')]",
    "productsDestinationPath":
      "[concat(variables('retailDataDestination_folderPath'), 'ProductFile')]",
    "fileName": "part*.csv"
  },
  "resources": [
    {
      "name": "[variables('clusterAttachedStorageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[parameters('location')]",
      "apiVersion": "2016-01-01",
      "sku": {
        "name": "[parameters('clusterAttachedStorageType')]"
      },
      "dependsOn": [],
      "tags": {
        "displayName": "clusterattachedstorage"
      },
      "kind": "Storage"
    },
    {
      "name": "[concat(variables('clusterAttachedStorageName'),'kafka')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[parameters('location')]",
      "apiVersion": "2016-01-01",
      "sku": {
        "name": "[parameters('clusterAttachedStorageType')]"
      },
      "dependsOn": [],
      "tags": {
        "displayName": "clusterattachedstorage"
      },
      "kind": "Storage"
    },
    {
      "name": "[variables('clusterVNetName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('defaultApiVersion')]",
      "dependsOn": [],
      "tags": {},
      "properties": {
        "addressSpace": {
          "addressPrefixes": ["[variables('clusterVNetAddressSpace')]"]
        },
        "subnets": [
          {
            "name": "[variables('clusterVNetSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('clusterVNetSubnetAddressRange')]"
            }
          }
        ]
      }
    },
    // Azure Data Factory
    {
      "name": "[concat(variables('dataFactoryName'), copyIndex())]",
      "condition": "[equals(parameters('skipLab1'),'No')]",
      "type": "Microsoft.DataFactory/factories",
      "location": "[resourceGroup().location]",
      "apiVersion": "2017-09-01-preview",
      "copy": {
        "name": "adfcopy",
        "count": "[parameters('clusterCount')]"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {}
    },
    {
      "name":
        "[concat(variables('dataFactoryName'), copyIndex(), '/Pipeline_CopyRetailDataToStorageAccount')]",
      "condition": "[equals(parameters('skipLab1'),'No')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2017-09-01-preview",
      "copy": {
        "name": "adfpipelinecopyretaildatacopy",
        "count": "[parameters('clusterCount')]"
      },
      "properties": {
        "description":
          "Copies files from the retaildata public storage account to your storage account",
        "activities": [
          {
            "name": "Copy_weblogs",
            "type": "Copy",
            "dependsOn": [],
            "policy": {
              "timeout": "7.00:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30
            },
            "typeProperties": {
              "source": {
                "type": "BlobSource",
                "recursive": true
              },
              "sink": {
                "type": "BlobSink",
                "copyBehavior": "PreserveHierarchy"
              },
              "enableStaging": false,
              "cloudDataMovementUnits": 0,
              "enableSkipIncompatibleRow": true
            },
            "inputs": [
              {
                "referenceName": "retaildata_weblogs",
                "type": "DatasetReference",
                "parameters": {}
              }
            ],
            "outputs": [
              {
                "referenceName": "weblogs_output",
                "type": "DatasetReference",
                "parameters": {}
              }
            ]
          },
          {
            "name": "Copy_users",
            "type": "Copy",
            "dependsOn": [],
            "policy": {
              "timeout": "7.00:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false
            },
            "typeProperties": {
              "source": {
                "type": "BlobSource",
                "recursive": true
              },
              "sink": {
                "type": "BlobSink",
                "copyBehavior": "PreserveHierarchy"
              },
              "enableStaging": false,
              "cloudDataMovementUnits": 0,
              "enableSkipIncompatibleRow": true
            },
            "inputs": [
              {
                "referenceName": "retaildata_users",
                "type": "DatasetReference",
                "parameters": {}
              }
            ],
            "outputs": [
              {
                "referenceName": "users_output",
                "type": "DatasetReference",
                "parameters": {}
              }
            ]
          },
          {
            "name": "Copy_products",
            "type": "Copy",
            "dependsOn": [],
            "policy": {
              "timeout": "7.00:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false
            },
            "typeProperties": {
              "source": {
                "type": "BlobSource",
                "recursive": true
              },
              "sink": {
                "type": "BlobSink"
              },
              "enableStaging": false,
              "cloudDataMovementUnits": 0,
              "enableSkipIncompatibleRow": true
            },
            "inputs": [
              {
                "referenceName": "retaildata_products",
                "type": "DatasetReference",
                "parameters": {}
              }
            ],
            "outputs": [
              {
                "referenceName": "products_output",
                "type": "DatasetReference",
                "parameters": {}
              }
            ]
          }
        ]
      },
      "dependsOn": [
        "[concat(variables('factoryId'), copyIndex(), '/datasets/retaildata_weblogs')]",
        "[concat(variables('factoryId'), copyIndex(), '/datasets/weblogs_output')]",
        "[concat(variables('factoryId'), copyIndex(), '/datasets/retaildata_users')]",
        "[concat(variables('factoryId'), copyIndex(), '/datasets/users_output')]",
        "[concat(variables('factoryId'), copyIndex(), '/datasets/retaildata_products')]",
        "[concat(variables('factoryId'), copyIndex(), '/datasets/products_output')]"
      ]
    },
    {
      "name":
        "[concat(variables('dataFactoryName'), copyIndex(), '/retaildata_weblogs')]",
      "condition": "[equals(parameters('skipLab1'),'No')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2017-09-01-preview",
      "copy": {
        "name": "adfretaildataweblogscopy",
        "count": "[parameters('clusterCount')]"
      },
      "properties": {
        "linkedServiceName": {
          "referenceName": "RetailData_BlobStorage",
          "type": "LinkedServiceReference"
        },
        "type": "AzureBlob",
        "structure": [
          {
            "name": "UserId",
            "type": "Int64"
          },
          {
            "name": "SessionId",
            "type": "String"
          },
          {
            "name": "ProductId",
            "type": "Int64"
          },
          {
            "name": "Quantity",
            "type": "Int64"
          },
          {
            "name": "Price",
            "type": "Double"
          },
          {
            "name": "TotalPrice",
            "type": "Double"
          },
          {
            "name": "ReferralURL",
            "type": "String"
          },
          {
            "name": "PageStopDuration",
            "type": "Int64"
          },
          {
            "name": "Action",
            "type": "String"
          },
          {
            "name": "TransactionDate",
            "type": "DateTime"
          }
        ],
        "typeProperties": {
          "format": {
            "type": "TextFormat",
            "columnDelimiter": "|",
            "treatEmptyAsNull": true,
            "firstRowAsHeader": true
          },
          "folderPath": "[variables('retaildata_weblogs_folderPath')]"
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), copyIndex(), '/linkedServices/RetailData_BlobStorage')]"
      ]
    },
    {
      "name":
        "[concat(variables('dataFactoryName'), copyIndex(), '/weblogs_output')]",
      "condition": "[equals(parameters('skipLab1'),'No')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2017-09-01-preview",
      "copy": {
        "name": "adfweblogsoutputcopy",
        "count": "[parameters('clusterCount')]"
      },
      "properties": {
        "linkedServiceName": {
          "referenceName": "Destination_BlobStorage",
          "type": "LinkedServiceReference"
        },
        "type": "AzureBlob",
        "structure": [
          {
            "name": "UserId",
            "type": "Int64"
          },
          {
            "name": "SessionId",
            "type": "String"
          },
          {
            "name": "ProductId",
            "type": "Int64"
          },
          {
            "name": "Quantity",
            "type": "Int64"
          },
          {
            "name": "Price",
            "type": "Double"
          },
          {
            "name": "TotalPrice",
            "type": "Double"
          },
          {
            "name": "ReferralURL",
            "type": "String"
          },
          {
            "name": "PageStopDuration",
            "type": "Int64"
          },
          {
            "name": "Action",
            "type": "String"
          },
          {
            "name": "TransactionDate",
            "type": "DateTime"
          }
        ],
        "typeProperties": {
          "format": {
            "type": "TextFormat",
            "columnDelimiter": "|",
            "treatEmptyAsNull": true,
            "firstRowAsHeader": true
          },
          "folderPath":
            "[concat(variables('clusterAttachedStorageName') ,copyIndex(), '/', variables('weblogsDestinationPath'))]"
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), copyIndex(), '/linkedServices/Destination_BlobStorage')]"
      ]
    },
    {
      "name":
        "[concat(variables('dataFactoryName'), copyIndex(), '/retaildata_users')]",
      "condition": "[equals(parameters('skipLab1'),'No')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2017-09-01-preview",
      "copy": {
        "name": "adfretaildatauserscopy",
        "count": "[parameters('clusterCount')]"
      },
      "properties": {
        "linkedServiceName": {
          "referenceName": "RetailData_BlobStorage",
          "type": "LinkedServiceReference"
        },
        "type": "AzureBlob",
        "typeProperties": {
          "format": {
            "type": "TextFormat",
            "columnDelimiter": ",",
            "rowDelimiter": "",
            "nullValue": "\\N",
            "treatEmptyAsNull": true,
            "firstRowAsHeader": false
          },
          "fileName": "[variables('fileName')]",
          "folderPath": "[variables('retaildata_users_folderPath')]"
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), copyIndex(), '/linkedServices/RetailData_BlobStorage')]"
      ]
    },
    {
      "name":
        "[concat(variables('dataFactoryName'), copyIndex(), '/users_output')]",
      "condition": "[equals(parameters('skipLab1'),'No')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2017-09-01-preview",
      "copy": {
        "name": "adfusersoutputcopy",
        "count": "[parameters('clusterCount')]"
      },
      "properties": {
        "linkedServiceName": {
          "referenceName": "Destination_BlobStorage",
          "type": "LinkedServiceReference"
        },
        "type": "AzureBlob",
        "typeProperties": {
          "format": {
            "type": "TextFormat",
            "columnDelimiter": ",",
            "rowDelimiter": "",
            "nullValue": "\\N",
            "treatEmptyAsNull": true,
            "firstRowAsHeader": false
          },
          "folderPath":
            "[concat(variables('clusterAttachedStorageName') ,copyIndex(), '/', variables('usersDestinationPath'))]"
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), copyIndex(), '/linkedServices/Destination_BlobStorage')]"
      ]
    },
    {
      "name":
        "[concat(variables('dataFactoryName'), copyIndex(), '/retaildata_products')]",
      "condition": "[equals(parameters('skipLab1'),'No')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2017-09-01-preview",
      "copy": {
        "name": "adfretaildataproductscopy",
        "count": "[parameters('clusterCount')]"
      },
      "properties": {
        "linkedServiceName": {
          "referenceName": "RetailData_BlobStorage",
          "type": "LinkedServiceReference"
        },
        "type": "AzureBlob",
        "typeProperties": {
          "format": {
            "type": "TextFormat",
            "columnDelimiter": ",",
            "rowDelimiter": "",
            "nullValue": "\\N",
            "treatEmptyAsNull": true,
            "firstRowAsHeader": false
          },
          "fileName": "[variables('fileName')]",
          "folderPath": "[variables('retaildata_products_folderPath')]"
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), copyIndex(), '/linkedServices/RetailData_BlobStorage')]"
      ]
    },
    {
      "name":
        "[concat(variables('dataFactoryName'), copyIndex(), '/products_output')]",
      "condition": "[equals(parameters('skipLab1'),'No')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2017-09-01-preview",
      "copy": {
        "name": "productsoutputcopy",
        "count": "[parameters('clusterCount')]"
      },
      "properties": {
        "linkedServiceName": {
          "referenceName": "Destination_BlobStorage",
          "type": "LinkedServiceReference"
        },
        "type": "AzureBlob",
        "typeProperties": {
          "format": {
            "type": "TextFormat",
            "columnDelimiter": ",",
            "rowDelimiter": "",
            "nullValue": "\\N",
            "treatEmptyAsNull": true,
            "firstRowAsHeader": false
          },
          "folderPath":
            "[concat(variables('clusterAttachedStorageName') ,copyIndex(), '/', variables('productsDestinationPath'))]"
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), copyIndex(), '/linkedServices/Destination_BlobStorage')]"
      ]
    },
    {
      "name":
        "[concat(variables('dataFactoryName'), copyIndex(), '/RetailData_BlobStorage')]",
      "condition": "[equals(parameters('skipLab1'),'No')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2017-09-01-preview",
      "copy": {
        "name": "adflinkedsourceblobcopy",
        "count": "[parameters('clusterCount')]"
      },
      "properties": {
        "type": "AzureStorage",
        "typeProperties": {
          "sasUri": {
            "type": "SecureString",
            "value": "[variables('RetailData_BlobStorage_SasUri')]"
          }
        }
      },
      "dependsOn": ["[concat(variables('factoryId'), copyIndex())]"]
    },
    {
      "name":
        "[concat(variables('dataFactoryName'), copyIndex(), '/Destination_BlobStorage')]",
      "condition": "[equals(parameters('skipLab1'),'No')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2017-09-01-preview",
      "copy": {
        "name": "adflinkeddestinationblobcopy",
        "count": "[parameters('clusterCount')]"
      },
      "properties": {
        "type": "AzureStorage",
        "typeProperties": {
          "connectionString": {
            "type": "SecureString",
            "value":
              "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('clusterAttachedStorageName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('clusterAttachedStorageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value)]"
          }
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/',variables('clusterAttachedStorageName'))]",
        "[concat(variables('factoryId'), copyIndex())]"
      ]
    },
    // Azure Databricks workspace
    {
      "apiVersion": "2018-04-01",
      "name": "[concat(parameters('clusterName'), copyIndex())]",
      "condition": "[equals(parameters('provisionSpark'),'Yes')]",
      "copy": {
        "name": "databrickscopy",
        "count": "[parameters('clusterCount')]"
      },
      "type": "Microsoft.Databricks/workspaces",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('clusterAttachedStorageName'))]",
        "[concat('Microsoft.Network/virtualNetworks/',variables('clusterVNetName'))]"
      ],
      "sku": {
        "name": "[parameters('pricingTier')]"
      },
      "properties": {
        "ManagedResourceGroupId":
          "[concat(subscription().id, '/resourceGroups/', 'databricks-rg-', parameters('clusterName'), copyIndex(), '-', uniqueString(parameters('clusterName'), resourceGroup().id))]"
      }
    },
    // Kafka Cluster
    {
      "apiVersion": "[variables('clusterApiVersion')]",
      "location": "[parameters('location')]",
      "name": "[concat( 'kf', copyIndex(), parameters('clusterName'))]",
      "condition": "[equals(parameters('provisionKafka'),'Yes')]",
      "copy": {
        "name": "hdinsightkafkacopy",
        "count": "[parameters('clusterCount')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', concat(variables('clusterAttachedStorageName'),'kafka'))]",
        "[concat('Microsoft.Network/virtualNetworks/',variables('clusterVNetName'))]"
      ],
      "type": "Microsoft.HDInsight/clusters",
      "properties": {
        "clusterVersion": "[parameters('clusterVersion')]",
        "osType": "Linux",
        "tier": "standard",
        "clusterDefinition": {
          "kind": "kafka",
          "configurations": {
            "gateway": {
              "restAuthCredential.isEnabled": true,
              "restAuthCredential.username":
                "[parameters('clusterLoginUserName')]",
              "restAuthCredential.password":
                "[parameters('clusterLoginPassword')]"
            }
          }
        },
        "storageProfile": {
          "storageaccounts": [
            {
              "name":
                "[concat(variables('clusterAttachedStorageName'),'kafka','.blob.core.windows.net')]",
              "isDefault": true,
              "container": "[concat(parameters('clusterName'), copyIndex())]",
              "key":
                "[listKeys(resourceId('Microsoft.Storage/storageAccounts', concat(variables('clusterAttachedStorageName'),'kafka')), variables('defaultApiVersion')).key1]"
            }
          ]
        },
        "computeProfile": {
          "roles": [
            {
              "name": "headnode",
              "minInstanceCount": 1,
              "targetInstanceCount": 2,
              "hardwareProfile": {
                "vmSize": "Standard_D12_V2"
              },
              "osProfile": {
                "linuxOperatingSystemProfile": {
                  "username": "[parameters('sshUserName')]",
                  "password": "[parameters('sshPassword')]"
                }
              },
              "virtualNetworkProfile": {
                "id":
                  "[resourceId('Microsoft.Network/virtualNetworks', variables('clusterVNetName'))]",
                "subnet":
                  "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('clusterVNetName')), '/subnets/', variables('clusterVNetSubnetName'))]"
              }
            },
            {
              "name": "workernode",
              "minInstanceCount": 1,
              "targetInstanceCount": 3,
              "hardwareProfile": {
                "vmSize": "Standard_D12_V2"
              },
              "dataDisksGroups": [
                {
                  "disksPerNode": 2
                }
              ],
              "osProfile": {
                "linuxOperatingSystemProfile": {
                  "username": "[parameters('sshUserName')]",
                  "password": "[parameters('sshPassword')]"
                }
              },
              "virtualNetworkProfile": {
                "id":
                  "[resourceId('Microsoft.Network/virtualNetworks', variables('clusterVNetName'))]",
                "subnet":
                  "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('clusterVNetName')), '/subnets/', variables('clusterVNetSubnetName'))]"
              }
            },
            {
              "name": "zookeepernode",
              "minInstanceCount": 1,
              "targetInstanceCount": 3,
              "hardwareProfile": {
                "vmSize": "Medium"
              },
              "osProfile": {
                "linuxOperatingSystemProfile": {
                  "username": "[parameters('sshUserName')]",
                  "password": "[parameters('sshPassword')]"
                }
              },
              "virtualNetworkProfile": {
                "id":
                  "[resourceId('Microsoft.Network/virtualNetworks', variables('clusterVNetName'))]",
                "subnet":
                  "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('clusterVNetName')), '/subnets/', variables('clusterVNetSubnetName'))]"
              }
            }
          ]
        }
      },
      "tags": {},
      "type": "Microsoft.HDInsight/clusters"
    }
  ],
  "outputs": {}
}
